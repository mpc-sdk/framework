use thiserror::Error;

/// Errors generated by the driver.
#[derive(Debug, Error)]
pub enum Error {
    /// Error when the session identifier for an incoming message
    /// does not match the session identifier assigned to the bridge.
    #[error("session identifier mismatch for incoming message")]
    SessionIdMismatch,

    /// Error generated when a session identifier is required.
    #[error("session identifier required")]
    SessionIdRequired,

    /// Error generated when meeting identifiers are not unique.
    #[error("meeting identifiers must be unique")]
    MeetingIdentifiersNotUnique,

    /// Error generated when the meeting initiator does not exist
    /// in the list of meeting point identifiers.
    #[error("meeting initiator must exist in list of identifiers")]
    MeetingInitiatorNotExist,

    /// Signing key does not exist in list of verifying keys.
    #[error("signer is not a verifying party")]
    NotVerifyingParty,

    /// Error when noise protocol participants list does not match
    /// the number of verifying keys.
    #[error("number of participants '{0}' does not match number of verifying keys '{1}'")]
    ParticipantVerifierLength(usize, usize),

    /// CGGMP driver errors.
    #[cfg(feature = "cggmp")]
    #[error(transparent)]
    Cggmp(#[from] crate::cggmp::Error),

    /// Client library errors.
    #[error(transparent)]
    Client(#[from] mpc_client::Error),
}

#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
impl From<Error> for wasm_bindgen::JsValue {
    fn from(value: Error) -> Self {
        let s = value.to_string();
        wasm_bindgen::JsValue::from_str(&s)
    }
}
