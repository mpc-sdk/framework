/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Signer for ECDSA. */
export declare class EcdsaSigner {
  /** Create a new signer. */
  constructor(signingKey: Uint8Array)
  /**
   * Sign the given message, hashing it with the curveâ€™s
   * default digest function, and returning a signature
   * and recovery ID.
   */
  signRecoverable(message: Uint8Array): unknown
  /**
   * Sign the given message prehash, returning a signature
   * and recovery ID.
   */
  signPrehashRecoverable(message: Uint8Array): unknown
  /** Verifying key for this signer. */
  verifyingKey(): Array<number>
  /** Verify a prehash. */
  verifyPrehash(prehash: Uint8Array, signature: Uint8Array): void
  /**
   * Sign a message for Ethereum first hashing the message
   * with the Keccak256 digest.
   */
  signEth(message: Uint8Array): unknown
}
/** Signer for EdDSA. */
export declare class EddsaSigner {
  /** Create a new signer. */
  constructor(signingKey: Uint8Array)
  /** Verifying key for this signer. */
  verifyingKey(): Array<number>
}
/** Signer for Schnorr. */
export declare class SchnorrSigner {
  /** Create a new signer. */
  constructor(signingKey: Uint8Array)
  /** Verifying key for this signer. */
  verifyingKey(): Array<number>
}
