/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Signer for ECDSA. */
export declare class EcdsaSigner {
  /** Create a new signer. */
  constructor(signingKey: Array<number>)
  /** Generate a random signing key. */
  static random(): Array<number>
  /**
   * Sign the given message, hashing it with the curveâ€™s
   * default digest function, and returning a signature
   * and recovery ID.
   */
  signRecoverable(message: Array<number>): unknown
  /**
   * Sign the given message prehash, returning a signature
   * and recovery ID.
   */
  signPrehashRecoverable(message: Array<number>): unknown
  /** Sign a message. */
  sign(message: Array<number>): Array<number>
  /** Verifying key for this signer. */
  verifyingKey(): Array<number>
  /** Verify a message. */
  verify(message: Array<number>, signature: Array<number>): void
  /** Verify a prehash. */
  verifyPrehash(prehash: Array<number>, signature: Array<number>): void
  /**
   * Sign a message for Ethereum first hashing the message
   * with the Keccak256 digest.
   */
  signEth(message: Array<number>): unknown
  /** Recover the public key from a signature and recovery identifier. */
  static recover(message: Array<number>, signature: unknown): Array<number>
  /** Compute the Keccak256 digest of a message. */
  static keccak256(message: Array<number>): Array<number>
}
